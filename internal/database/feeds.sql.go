// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"time"
)

const containsFeed = `-- name: ContainsFeed :one
SELECT EXISTS (
    SELECT 1 FROM feeds
    WHERE user_id = $1 AND name = $2
)
`

type ContainsFeedParams struct {
	UserID int32
	Name   string
}

func (q *Queries) ContainsFeed(ctx context.Context, arg ContainsFeedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsFeed, arg.UserID, arg.Name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds(created_at, updated_at, name, user_id)
VALUES(
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name, user_id
`

type CreateFeedParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	UserID    int32
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const deleteAllFeeds = `-- name: DeleteAllFeeds :exec
DELETE FROM feeds
WHERE user_id = $1
RETURNING id, created_at, updated_at, name, user_id
`

func (q *Queries) DeleteAllFeeds(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllFeeds, userID)
	return err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds
WHERE user_id = $1 AND name = $2
RETURNING id, created_at, updated_at, name, user_id
`

type DeleteFeedParams struct {
	UserID int32
	Name   string
}

func (q *Queries) DeleteFeed(ctx context.Context, arg DeleteFeedParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, arg.UserID, arg.Name)
	return err
}

const getAllUserFeeds = `-- name: GetAllUserFeeds :many
SELECT id, name FROM feeds
WHERE user_id = $1
`

type GetAllUserFeedsRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetAllUserFeeds(ctx context.Context, userID int32) ([]GetAllUserFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserFeeds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserFeedsRow
	for rows.Next() {
		var i GetAllUserFeedsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedId = `-- name: GetFeedId :one
SELECT id FROM feeds
WHERE user_id = $1 AND name = $2
`

type GetFeedIdParams struct {
	UserID int32
	Name   string
}

func (q *Queries) GetFeedId(ctx context.Context, arg GetFeedIdParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getFeedId, arg.UserID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateName = `-- name: UpdateName :one
UPDATE feeds
SET name = $2, updated_at = $3
WHERE user_id = $1
RETURNING id, created_at, updated_at, name, user_id
`

type UpdateNameParams struct {
	UserID    int32
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateName(ctx context.Context, arg UpdateNameParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, updateName, arg.UserID, arg.Name, arg.UpdatedAt)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}
