// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds_channels.sql

package database

import (
	"context"
)

const containsChannel = `-- name: ContainsChannel :one
SELECT EXISTS (
    SELECT 1 FROM feeds_channels
    WHERE channel_id = $1
)
`

func (q *Queries) ContainsChannel(ctx context.Context, channelID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsChannel, channelID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const containsFeedChannel = `-- name: ContainsFeedChannel :one
SELECT EXISTS (
    SELECT 1 FROM feeds_channels
    WHERE feed_id = $1 AND channel_id = $2
)
`

type ContainsFeedChannelParams struct {
	FeedID    int32
	ChannelID string
}

func (q *Queries) ContainsFeedChannel(ctx context.Context, arg ContainsFeedChannelParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsFeedChannel, arg.FeedID, arg.ChannelID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteAllFeedChannels = `-- name: DeleteAllFeedChannels :exec
DELETE FROM feeds_channels
WHERE feed_id = $1
`

func (q *Queries) DeleteAllFeedChannels(ctx context.Context, feedID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllFeedChannels, feedID)
	return err
}

const deleteFeedChannel = `-- name: DeleteFeedChannel :exec
DELETE FROM feeds_channels 
WHERE feed_id = $1 AND channel_id = $2
`

type DeleteFeedChannelParams struct {
	FeedID    int32
	ChannelID string
}

func (q *Queries) DeleteFeedChannel(ctx context.Context, arg DeleteFeedChannelParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedChannel, arg.FeedID, arg.ChannelID)
	return err
}

const getAllFeedChannels = `-- name: GetAllFeedChannels :many
SELECT channel_id FROM feeds_channels
WHERE feed_id = $1
`

func (q *Queries) GetAllFeedChannels(ctx context.Context, feedID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedChannels, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var channel_id string
		if err := rows.Scan(&channel_id); err != nil {
			return nil, err
		}
		items = append(items, channel_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertFeedChannel = `-- name: InsertFeedChannel :exec
INSERT INTO feeds_channels (feed_id, channel_id) 
VALUES(
    $1,
    $2
)
`

type InsertFeedChannelParams struct {
	FeedID    int32
	ChannelID string
}

func (q *Queries) InsertFeedChannel(ctx context.Context, arg InsertFeedChannelParams) error {
	_, err := q.db.ExecContext(ctx, insertFeedChannel, arg.FeedID, arg.ChannelID)
	return err
}
