// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const containsUserByFirebaseId = `-- name: ContainsUserByFirebaseId :one
SELECT EXISTS (
    SELECT 1 FROM users
    WHERE fb_user_id = $1
)
`

func (q *Queries) ContainsUserByFirebaseId(ctx context.Context, fbUserID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsUserByFirebaseId, fbUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const containsUserById = `-- name: ContainsUserById :one
SELECT EXISTS (
    SELECT 1 FROM users
    WHERE id = $1
)
`

func (q *Queries) ContainsUserById(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsUserById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (fb_user_id, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id
`

type CreateUserParams struct {
	FbUserID  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FbUserID, arg.CreatedAt, arg.UpdatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, fb_user_id, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FbUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, fb_user_id, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FbUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIdByFirebaseId = `-- name: GetUserIdByFirebaseId :one
SELECT id FROM users
WHERE fb_user_id = $1
`

func (q *Queries) GetUserIdByFirebaseId(ctx context.Context, fbUserID string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserIdByFirebaseId, fbUserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
