// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const containsUser = `-- name: ContainsUser :one
SELECT EXISTS (
    SELECT 1 FROM users
    WHERE name = $1
)
`

func (q *Queries) ContainsUser(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsUser, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const containsUserById = `-- name: ContainsUserById :one
SELECT EXISTS (
    SELECT 1 FROM users
    WHERE id = $1
)
`

func (q *Queries) ContainsUserById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsUserById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteUserID = `-- name: DeleteUserID :one
DELETE FROM users WHERE id = $1
RETURNING id, created_at, updated_at, name
`

func (q *Queries) DeleteUserID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteUserName = `-- name: DeleteUserName :one
DELETE FROM users WHERE name = $1
RETURNING id, created_at, updated_at, name
`

func (q *Queries) DeleteUserName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, name FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserId = `-- name: GetUserId :one
SELECT id, created_at, updated_at, name FROM users
WHERE id = $1
`

func (q *Queries) GetUserId(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getUserName = `-- name: GetUserName :one
SELECT id, created_at, updated_at, name FROM users
WHERE name = $1
`

func (q *Queries) GetUserName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users
SET name = $2, updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, name
`

type UpdateUserNameParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserName, arg.ID, arg.Name, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
